コードを記述する際のルールについて

変数の命名規則
 キャメルケースに則って命名する(キャメルケースとは、最初の単語を小文字にし、それ以降の単語の先頭を大文字にする形式)
 例: sampleUniversity, tmpCount, isCall

定数の命名規則
 アッパースネークケースに則って命名する(アッパースネークケースとは、すべて大文字で記述し、単語をアンダースコアで区切る形式)
 例: UPPER_SNAKE_CASE, ORANGE_TABLE

コンポーネントの命名規則
 パスカルケースに則って命名する(パスカルケースとは、すべての単語の先頭を大文字にする形式)
 例: PascalCase, MainLayout

関数の命名規則
 コンポーネントの命名規則に準拠する

HTML classNameの命名規則
 変数の命名規則に準拠する

CSSの使用規則
 原則、module.cssを使用する

()の使用規則
 内側にスペースを置かない
 例: color: var(--foreground);

{}の使用規則
 前にスペースを置く & 内側にスペースを置く
 例: 
 // 共通レイアウトのコンポーネント
 const MainLayout = ({ children }: { children: React.ReactNode }) => {
   return (
     <>
       <Header />
         <div>
           { children }
         </div>
       <Footer />
     </>
   )
 }
 // 呼び出し側
 const MenuPage = () => {
   return (
     <MainLayout>
     // この中にページの内容を書く
     </MainLayout>
   )
 }

[]の使用規則
 区切り以外ではスペースを置かない
 例: const nums = [1, 2, 3];

:の使用規則
 後ろにスペースを置く
 例: children: React.ReactNode

;の使用規則
 原則 ;の次には改行を設ける
 例:
 nav ul {
   display: flex;
   width: 80%;
   margin: auto;
   padding: 0;
 }
 一行つづきに書く場合、後ろにスペースを置く
 例: nav ul { display: flex; width: 80%; margin: auto; padding: 0; }

JSX要素の返り値
 JSX要素を返り値とするとき、JSX要素の型を明示する
 例: const App = ({ name }: { name: string }): JSX.Element => <div>{name}</div>;

インデントについて
 半角スペース2つ分とする

特記事項
 変数および定数を初期化する場合を除いてマジックナンバーを記述するのは避ける
 関数は原則アロー関数で記述する
